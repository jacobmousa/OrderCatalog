name: CI - Split Build & Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore .NET
        run: dotnet restore ./ECommerceDemo.sln

      - name: Build .NET (Release)
        run: dotnet build ./ECommerceDemo.sln --configuration Release --no-restore

      - name: Upload build outputs (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-build
          path: |
            **/bin/Release/**
          if-no-files-found: ignore

  unit-tests:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore .NET
        run: dotnet restore ./ECommerceDemo.sln

      - name: Run unit tests
        run: dotnet test ./ECommerceDemo.sln --configuration Release --filter TestCategory=Unit --logger "trx;LogFileName=unit-results.trx" || dotnet test ./ECommerceDemo.sln --configuration Release --logger "trx;LogFileName=results.trx"

  api-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore .NET
        run: dotnet restore ./ECommerceDemo.sln

      - name: Run API/integration tests
        run: dotnet test ./ECommerceDemo.sln --configuration Release --filter TestCategory=Integration --logger "trx;LogFileName=integration-results.trx" || dotnet test ./ECommerceDemo.sln --configuration Release --logger "trx;LogFileName=results.trx"

  build-frontend:
    runs-on: ubuntu-latest
    needs: api-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node deps
        working-directory: frontend
        run: npm install --workspaces --no-audit --no-fund

      - name: Build frontend workspaces
        working-directory: frontend
        run: |
          npm run build --workspace=catalog-remote || echo "catalog-remote build skipped"
          npm run build --workspace=orders-remote || echo "orders-remote build skipped"
          npm run build --workspace=web-shell || echo "web-shell build skipped"
